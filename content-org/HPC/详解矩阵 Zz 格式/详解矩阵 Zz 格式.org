#+title: 详解矩阵 zZ|zN|nN|nZ 四种格式
#+hugo_custom_front_matter: :mathjax true
#+hugo_tags: 算子开发
#+hugo_categories: HPC
#+DATE: [2023-12-12 Tue]

在全局内存（Global Memory）中，一个列优先矩阵的存在形式一般如下图所示：
[[file:ND列优先格式示意.drawio.png]]

线的方向，就是其索引（Index）增大的方向。而如果将这根线扯直，我们可以看到这样的图景：
[[file:ND矩阵actual.png]]

上图中，不同的颜色代表了不同的矩阵。我们做一层“二维矩阵”的抽象之后，它在我们的脑海中长这样：
[[file:ND矩阵details.png]]

可以看到，同一个矩阵的不同元素，它们 *居然在内存里面不是连续存放的* ！那么这样有什么危害呢？不如设想下面这样一个程序，它对两个矩阵做矩阵乘法。那么这个过程可以如此用图表述：

[[file:matmultiply.png]]

我们把矩阵相乘的过程打开，会发现计算这单单一轮的分形矩阵的相乘的一次向量乘，就需要我们对左边的矩阵进行三次额外的读，而如果我们的硬件支持更大的向量读入，则这个向量读取与计算的算力会被极大地浪费在这上面。

#+begin_quote
什么是『分形矩阵』的概念？它就是线性代数里面的分块矩阵 $A_{i,j}$
#+end_quote

#+begin_quote
在 CUDA 和 ROCM 针对的 SIMT 的GPU并行计算场景里，这个问题不是非常显著，因为分形矩阵被调入 ~__shared_memory__~ 里面时，是被线程进行标量读与写的。但是对于 NPU 而言，由于它大量的向量化操作，这里的优化至关重要。（这里不一定如此，ROCM 好像就支持一个Float4的类型计算，也是属于向量运算，应该也需要考虑到分形矩阵会浪费向量化的 load / store 的算力的问题。但是对于初学者的我而言，这里迷惑了我一下）
#+end_quote

所以我们应该如何解决这个问题呢？答案就在标题里面，聪明的读者可能已经自己悟到了，即 zZ|zN|nN|nZ 四种从全局内存中读取到缓存中的方式。为简便，我们只讨论zZ格式：

[[file:Zz格式.drawio.png]]

*注意线的方向* ，就如同最开始的那张列优先格式的图那样，线增长的方向就是index增加的方向。我们可以发现分形矩阵间上面是呈Z形排布，而分形矩阵内部也是呈Z字形排布。这样有什么好处呢？

1. 假设我们有一个能够一次读取 size 大小的向量读取和计算的处理器，那么我们想取得分形矩阵 ~(0,0)~ 的第一行，我们就可以直接读开头的 size 个数就好了。
2. 而如果想读 ~(0,0)~ 的第 ~size - 1~ 行，也可以通过加一个偏置值 ~(size - 1) * size~ ，再读 ~size~ 个元素来实现。
3. 如果要读分形矩阵 ~(0, 1)~ 的第一列，则我们可以直接跳过 ~size * size~ 个元素，从 ~size * size + BASIC_OFFSET~ 用向量读的方法读 ~size~ 个元素，即是我们所需要的那个行向量了。

而理解其它三种方式，相信现在也已经不再困难了。再回过头来看这个矩阵相乘的算子，假设 $A\times B$ ，我们最好能够让矩阵A被加载成zZ的形式，而矩阵B被加载成nN的形式。因为我们将顺序地如此使用它们。
